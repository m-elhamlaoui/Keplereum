package com.keplereum.backend.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SensorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSensorAllPropertiesEquals(Sensor expected, Sensor actual) {
        assertSensorAutoGeneratedPropertiesEquals(expected, actual);
        assertSensorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSensorAllUpdatablePropertiesEquals(Sensor expected, Sensor actual) {
        assertSensorUpdatableFieldsEquals(expected, actual);
        assertSensorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSensorAutoGeneratedPropertiesEquals(Sensor expected, Sensor actual) {
        assertThat(actual)
            .as("Verify Sensor auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSensorUpdatableFieldsEquals(Sensor expected, Sensor actual) {
        assertThat(actual)
            .as("Verify Sensor relevant properties")
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getMaxHeight()).as("check maxHeight").isEqualTo(expected.getMaxHeight()))
            .satisfies(a -> assertThat(a.getMaxRadius()).as("check maxRadius").isEqualTo(expected.getMaxRadius()))
            .satisfies(a -> assertThat(a.getActivity()).as("check activity").isEqualTo(expected.getActivity()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSensorUpdatableRelationshipsEquals(Sensor expected, Sensor actual) {
        assertThat(actual)
            .as("Verify Sensor relationships")
            .satisfies(a -> assertThat(a.getSatellite()).as("check satellite").isEqualTo(expected.getSatellite()));
    }
}
