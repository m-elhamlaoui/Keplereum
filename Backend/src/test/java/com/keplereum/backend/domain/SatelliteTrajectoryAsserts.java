package com.keplereum.backend.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SatelliteTrajectoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSatelliteTrajectoryAllPropertiesEquals(SatelliteTrajectory expected, SatelliteTrajectory actual) {
        assertSatelliteTrajectoryAutoGeneratedPropertiesEquals(expected, actual);
        assertSatelliteTrajectoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSatelliteTrajectoryAllUpdatablePropertiesEquals(SatelliteTrajectory expected, SatelliteTrajectory actual) {
        assertSatelliteTrajectoryUpdatableFieldsEquals(expected, actual);
        assertSatelliteTrajectoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSatelliteTrajectoryAutoGeneratedPropertiesEquals(SatelliteTrajectory expected, SatelliteTrajectory actual) {
        assertThat(actual)
            .as("Verify SatelliteTrajectory auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSatelliteTrajectoryUpdatableFieldsEquals(SatelliteTrajectory expected, SatelliteTrajectory actual) {
        assertThat(actual)
            .as("Verify SatelliteTrajectory relevant properties")
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getStartTime()).as("check startTime").isEqualTo(expected.getStartTime()))
            .satisfies(a -> assertThat(a.getEndTime()).as("check endTime").isEqualTo(expected.getEndTime()))
            .satisfies(a -> assertThat(a.getOrbitEccentricity()).as("check orbitEccentricity").isEqualTo(expected.getOrbitEccentricity()))
            .satisfies(a -> assertThat(a.getOrbitInclination()).as("check orbitInclination").isEqualTo(expected.getOrbitInclination()))
            .satisfies(a ->
                assertThat(a.getOrbitRightAscension()).as("check orbitRightAscension").isEqualTo(expected.getOrbitRightAscension())
            )
            .satisfies(a ->
                assertThat(a.getOrbitArgumentOfPerigee()).as("check orbitArgumentOfPerigee").isEqualTo(expected.getOrbitArgumentOfPerigee())
            )
            .satisfies(a -> assertThat(a.getOrbitMeanAnomaly()).as("check orbitMeanAnomaly").isEqualTo(expected.getOrbitMeanAnomaly()))
            .satisfies(a -> assertThat(a.getOrbitPeriapsis()).as("check orbitPeriapsis").isEqualTo(expected.getOrbitPeriapsis()))
            .satisfies(a -> assertThat(a.getChangeReason()).as("check changeReason").isEqualTo(expected.getChangeReason()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSatelliteTrajectoryUpdatableRelationshipsEquals(SatelliteTrajectory expected, SatelliteTrajectory actual) {
        assertThat(actual)
            .as("Verify SatelliteTrajectory relationships")
            .satisfies(a -> assertThat(a.getSatellite()).as("check satellite").isEqualTo(expected.getSatellite()));
    }
}
