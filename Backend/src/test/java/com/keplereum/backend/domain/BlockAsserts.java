package com.keplereum.backend.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BlockAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlockAllPropertiesEquals(Block expected, Block actual) {
        assertBlockAutoGeneratedPropertiesEquals(expected, actual);
        assertBlockAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlockAllUpdatablePropertiesEquals(Block expected, Block actual) {
        assertBlockUpdatableFieldsEquals(expected, actual);
        assertBlockUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlockAutoGeneratedPropertiesEquals(Block expected, Block actual) {
        assertThat(actual)
            .as("Verify Block auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlockUpdatableFieldsEquals(Block expected, Block actual) {
        assertThat(actual)
            .as("Verify Block relevant properties")
            .satisfies(a -> assertThat(a.getHeight()).as("check height").isEqualTo(expected.getHeight()))
            .satisfies(a -> assertThat(a.getPreviousBlockHash()).as("check previousBlockHash").isEqualTo(expected.getPreviousBlockHash()))
            .satisfies(a -> assertThat(a.getCurrentBlockHash()).as("check currentBlockHash").isEqualTo(expected.getCurrentBlockHash()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBlockUpdatableRelationshipsEquals(Block expected, Block actual) {
        assertThat(actual)
            .as("Verify Block relationships")
            .satisfies(a -> assertThat(a.getNetworkNode()).as("check networkNode").isEqualTo(expected.getNetworkNode()));
    }
}
