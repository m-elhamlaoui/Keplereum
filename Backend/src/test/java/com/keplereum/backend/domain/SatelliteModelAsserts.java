package com.keplereum.backend.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SatelliteModelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSatelliteModelAllPropertiesEquals(SatelliteModel expected, SatelliteModel actual) {
        assertSatelliteModelAutoGeneratedPropertiesEquals(expected, actual);
        assertSatelliteModelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSatelliteModelAllUpdatablePropertiesEquals(SatelliteModel expected, SatelliteModel actual) {
        assertSatelliteModelUpdatableFieldsEquals(expected, actual);
        assertSatelliteModelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSatelliteModelAutoGeneratedPropertiesEquals(SatelliteModel expected, SatelliteModel actual) {
        assertThat(actual)
            .as("Verify SatelliteModel auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSatelliteModelUpdatableFieldsEquals(SatelliteModel expected, SatelliteModel actual) {
        assertThat(actual)
            .as("Verify SatelliteModel relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getManufacturer()).as("check manufacturer").isEqualTo(expected.getManufacturer()))
            .satisfies(a -> assertThat(a.getWeight()).as("check weight").isEqualTo(expected.getWeight()))
            .satisfies(a -> assertThat(a.getDimensions()).as("check dimensions").isEqualTo(expected.getDimensions()))
            .satisfies(a -> assertThat(a.getPowerCapacity()).as("check powerCapacity").isEqualTo(expected.getPowerCapacity()))
            .satisfies(a -> assertThat(a.getExpectedLifespan()).as("check expectedLifespan").isEqualTo(expected.getExpectedLifespan()))
            .satisfies(a ->
                assertThat(a.getDesignTrajectoryPredictionFactor())
                    .as("check designTrajectoryPredictionFactor")
                    .isEqualTo(expected.getDesignTrajectoryPredictionFactor())
            )
            .satisfies(a -> assertThat(a.getLaunchMass()).as("check launchMass").isEqualTo(expected.getLaunchMass()))
            .satisfies(a -> assertThat(a.getDryMass()).as("check dryMass").isEqualTo(expected.getDryMass()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSatelliteModelUpdatableRelationshipsEquals(SatelliteModel expected, SatelliteModel actual) {
        // empty method
    }
}
